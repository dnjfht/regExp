{"id":"main.js","dependencies":[{"name":"C:\\Users\\YuSeungMin\\Desktop\\fast_campus_frontend\\regexp\\package.json","includedInParent":true,"mtime":1704246421563}],"generated":{"js":"var str = \"\\n010-1234-5678\\nthednjfht@gmail.com\\nhttp://www.omdbapi.com/?apikey=56d328e5&s=frozen\\nThe quick brown fox jumps over the lazy dog.\\nabbcccdddd\\n\";\nvar regexp = new RegExp(\"the\", \"\");\nconsole.log(str.match(regexp));\n// ['the', index: 112, input: '\\n010-1234-5678\\nthednjfht@gmail.com\\nhttp://www.omdbapi…ck brown fox jumps over the lazy dog.\\nabbcccdddd\\n', groups: undefined]\n// 0 : \"the\", groups :  undefined, index : 112, input : \"\\n010-1234-5678\\ndnjfht@gmail.com\\nhttp://www.omdbapi.com/?apikey=56d328e5&s=frozen\\nThe quick brown fox jumps over the lazy dog.\\nabbcccdddd\\n\", length : 1\n// the라는 단어를 찾아서 배열 데이터로 만들어줌.\n\n// 만약 str 안에서 the라는 모든 단어를 찾아서 배열 데이터로 만들고 싶다면\n// 정규 표현식을 생성하는 생성자 함수의 두 번째 인수로 g라는 옵션을 추가해주면 됨.\n\nvar regexp2 = new RegExp(\"the\", \"g\");\nconsole.log(str.match(regexp2));\n// ['the', 'the']"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":1,"column":4},"source":"main.js","original":{"line":1,"column":6},"name":"str"},{"generated":{"line":1,"column":7},"source":"main.js","original":{"line":1,"column":9}},{"generated":{"line":1,"column":158},"source":"main.js","original":{"line":7,"column":1}},{"generated":{"line":2,"column":0},"source":"main.js","original":{"line":9,"column":0}},{"generated":{"line":2,"column":4},"source":"main.js","original":{"line":9,"column":6},"name":"regexp"},{"generated":{"line":2,"column":10},"source":"main.js","original":{"line":9,"column":12}},{"generated":{"line":2,"column":13},"source":"main.js","original":{"line":9,"column":15}},{"generated":{"line":2,"column":17},"source":"main.js","original":{"line":9,"column":19},"name":"RegExp"},{"generated":{"line":2,"column":23},"source":"main.js","original":{"line":9,"column":25}},{"generated":{"line":2,"column":24},"source":"main.js","original":{"line":9,"column":26}},{"generated":{"line":2,"column":29},"source":"main.js","original":{"line":9,"column":31}},{"generated":{"line":2,"column":31},"source":"main.js","original":{"line":9,"column":33}},{"generated":{"line":2,"column":33},"source":"main.js","original":{"line":9,"column":35}},{"generated":{"line":2,"column":34},"source":"main.js","original":{"line":9,"column":36}},{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":10,"column":0},"name":"console"},{"generated":{"line":3,"column":7},"source":"main.js","original":{"line":10,"column":7}},{"generated":{"line":3,"column":8},"source":"main.js","original":{"line":10,"column":8},"name":"log"},{"generated":{"line":3,"column":11},"source":"main.js","original":{"line":10,"column":11}},{"generated":{"line":3,"column":12},"source":"main.js","original":{"line":10,"column":12},"name":"str"},{"generated":{"line":3,"column":15},"source":"main.js","original":{"line":10,"column":15}},{"generated":{"line":3,"column":16},"source":"main.js","original":{"line":10,"column":16},"name":"match"},{"generated":{"line":3,"column":21},"source":"main.js","original":{"line":10,"column":21}},{"generated":{"line":3,"column":22},"source":"main.js","original":{"line":10,"column":22},"name":"regexp"},{"generated":{"line":3,"column":28},"source":"main.js","original":{"line":10,"column":28}},{"generated":{"line":3,"column":29},"source":"main.js","original":{"line":10,"column":29}},{"generated":{"line":3,"column":30},"source":"main.js","original":{"line":10,"column":30}},{"generated":{"line":4,"column":0},"source":"main.js","original":{"line":11,"column":0}},{"generated":{"line":5,"column":0},"source":"main.js","original":{"line":12,"column":0}},{"generated":{"line":6,"column":0},"source":"main.js","original":{"line":13,"column":0}},{"generated":{"line":8,"column":0},"source":"main.js","original":{"line":15,"column":0}},{"generated":{"line":9,"column":0},"source":"main.js","original":{"line":16,"column":0}},{"generated":{"line":11,"column":0},"source":"main.js","original":{"line":18,"column":0}},{"generated":{"line":11,"column":4},"source":"main.js","original":{"line":18,"column":6},"name":"regexp2"},{"generated":{"line":11,"column":11},"source":"main.js","original":{"line":18,"column":13}},{"generated":{"line":11,"column":14},"source":"main.js","original":{"line":18,"column":16}},{"generated":{"line":11,"column":18},"source":"main.js","original":{"line":18,"column":20},"name":"RegExp"},{"generated":{"line":11,"column":24},"source":"main.js","original":{"line":18,"column":26}},{"generated":{"line":11,"column":25},"source":"main.js","original":{"line":18,"column":27}},{"generated":{"line":11,"column":30},"source":"main.js","original":{"line":18,"column":32}},{"generated":{"line":11,"column":32},"source":"main.js","original":{"line":18,"column":34}},{"generated":{"line":11,"column":35},"source":"main.js","original":{"line":18,"column":37}},{"generated":{"line":11,"column":36},"source":"main.js","original":{"line":18,"column":38}},{"generated":{"line":12,"column":0},"source":"main.js","original":{"line":19,"column":0},"name":"console"},{"generated":{"line":12,"column":7},"source":"main.js","original":{"line":19,"column":7}},{"generated":{"line":12,"column":8},"source":"main.js","original":{"line":19,"column":8},"name":"log"},{"generated":{"line":12,"column":11},"source":"main.js","original":{"line":19,"column":11}},{"generated":{"line":12,"column":12},"source":"main.js","original":{"line":19,"column":12},"name":"str"},{"generated":{"line":12,"column":15},"source":"main.js","original":{"line":19,"column":15}},{"generated":{"line":12,"column":16},"source":"main.js","original":{"line":19,"column":16},"name":"match"},{"generated":{"line":12,"column":21},"source":"main.js","original":{"line":19,"column":21}},{"generated":{"line":12,"column":22},"source":"main.js","original":{"line":19,"column":22},"name":"regexp2"},{"generated":{"line":12,"column":29},"source":"main.js","original":{"line":19,"column":29}},{"generated":{"line":12,"column":30},"source":"main.js","original":{"line":19,"column":30}},{"generated":{"line":12,"column":31},"source":"main.js","original":{"line":19,"column":31}},{"generated":{"line":13,"column":0},"source":"main.js","original":{"line":20,"column":0}}],"sources":{"main.js":"const str = `\r\n010-1234-5678\r\nthednjfht@gmail.com\r\nhttp://www.omdbapi.com/?apikey=56d328e5&s=frozen\r\nThe quick brown fox jumps over the lazy dog.\r\nabbcccdddd\r\n`;\r\n\r\nconst regexp = new RegExp(\"the\", \"\");\r\nconsole.log(str.match(regexp));\r\n// ['the', index: 112, input: '\\n010-1234-5678\\nthednjfht@gmail.com\\nhttp://www.omdbapi…ck brown fox jumps over the lazy dog.\\nabbcccdddd\\n', groups: undefined]\r\n// 0 : \"the\", groups :  undefined, index : 112, input : \"\\n010-1234-5678\\ndnjfht@gmail.com\\nhttp://www.omdbapi.com/?apikey=56d328e5&s=frozen\\nThe quick brown fox jumps over the lazy dog.\\nabbcccdddd\\n\", length : 1\r\n// the라는 단어를 찾아서 배열 데이터로 만들어줌.\r\n\r\n// 만약 str 안에서 the라는 모든 단어를 찾아서 배열 데이터로 만들고 싶다면\r\n// 정규 표현식을 생성하는 생성자 함수의 두 번째 인수로 g라는 옵션을 추가해주면 됨.\r\n\r\nconst regexp2 = new RegExp(\"the\", \"g\");\r\nconsole.log(str.match(regexp2));\r\n// ['the', 'the']\r\n"},"lineCount":null}},"error":null,"hash":"a0072f29cd717912b0150cd17ab1347d","cacheData":{"env":{}}}